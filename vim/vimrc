filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Bundle 'tpope/vim-git'
Bundle 'pbrisbin/html-template-syntax.git'
Bundle 'Gundo'
Bundle 'klen/rope-vim.git'
Bundle 'trapd00r/vidir'
"Bundle 'notes.vim'
Bundle 'python.vim'
Bundle 'vim-scripts/pep8.git'
Bundle 'fs111/pydoc.vim.git'
Bundle 'alfredodeza/pytest.vim.git'
Bundle 'austintaylor/vim-indentobject'
Bundle 'ecomba/vim-ruby-refactoring'
Bundle 'visualstar.vim'
Bundle 'milkbikis/IDSearch.vim.git'
Bundle 'AutoTag'
Bundle 'vimGTD'
Bundle 'text object left and right'
Bundle 'textobj-diff'
Bundle 'textobj-entire'
Bundle 'textobj-fold'
Bundle 'textobj-lastpat'
Bundle 'textobj-syntax'
Bundle 'tpope/vim-fugitive'
Bundle 'gregsexton/gitv'
:set lazyredraw
highlight diffAdded guifg=#00bf00
highlight diffRemoved guifg=#bf0000
Bundle 'tomtom/tcomment_vim'
Bundle 'scrooloose/nerdtree'
Bundle 'tpope/vim-rails'
Bundle 'mileszs/ack.vim'
Bundle 'tpope/vim-surround'
Bundle 'L9'
Bundle 'FuzzyFinder'
Bundle 'endwise.vim'
Bundle 'matchit.zip'
Bundle 'textobj-user'
Bundle 'textobj-rubyblock'
runtime macros/matchit.vim
Bundle 'unimpaired.vim'
Bundle 'errormarker.vim'
Bundle 'abolish.vim'
Bundle 'delimitMate.vim'
Bundle 'camelcasemotion'
Bundle 'railscasts'
Bundle 'lukerandall/haskellmode-vim'
Bundle 'scrooloose/syntastic'
Bundle 'snipMate'
Bundle 'hlint'
Bundle 'nvie/vim-flake8'
autocmd FileType haskell compiler hlint
Bundle 'xolox/vim-misc'

"clojure
Bundle 'tpope/vim-fireplace'
Bundle 'tpope/vim-classpath'
Bundle 'guns/vim-clojure-static'
Bundle 'kien/rainbow_parentheses.vim'


set nocompatible

set backspace=indent,eol,start

set nobackup
set nowritebackup
set noswapfile
set history=50
set ruler
set showcmd
set incsearch

map Q gq


if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
  syntax on
  set hlsearch
endif

set nowrap

if has("autocmd")
  filetype plugin indent on

  autocmd BufNewFile,BufRead *.txt setfiletype text

  autocmd FileType text,markdown,html,xhtml,eruby setlocal wrap linebreak nolist

  augroup vimrcEx
  au!


  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  autocmd BufWritePost .vimrc source $MYVIMRC

  augroup END

else

  set autoindent

endif

set expandtab

set laststatus=2

let mapleader = ","

map <Leader>R :e doc/README_FOR_APP<CR>

"ruby on rails
map <Leader>m :Rmodel 
map <Leader>c :Rcontroller 
map <Leader>v :Rview 
map <Leader>u :Runittest 
map <Leader>f :Rfunctionaltest 
map <Leader>tm :RTmodel 
map <Leader>tc :RTcontroller 
map <Leader>tv :RTview 
map <Leader>tu :RTunittest 
map <Leader>tf :RTfunctionaltest 
map <Leader>sm :RSmodel 
map <Leader>sc :RScontroller 
map <Leader>sv :RSview 
map <Leader>su :RSunittest 
map <Leader>sf :RSfunctionaltest 
map <Leader>rt :Rake<CR>

map <Leader>a :Ack 
map <Leader>x :%s/\s\+$//<CR>

map <Leader>ii :call g:IDSearchCustom()<CR>
map <Leader>iw :call g:IDSearchCurrentWord()<CR>
map <Leader>ix :!mkid .<CR>

"git
map <Leader>gb :Gblame C<CR>
map <Leader>gd :Gdiff<CR>
map <Leader>gs :Gstatus<CR>
map <Leader>gc :Gcommit<CR>
nmap <leader>gL :Gitv<cr>
nmap <leader>gl :Gitv!<cr>
vmap <leader>gl :Gitv!<cr>


map <Leader>fb :FufBuffer<CR>
map <Leader>ff :FufCoverageFile<CR>
map <Leader>ft :FufTag<CR>
map <Leader>fc :FufChangeList<CR>
map <Leader>fj :FufJumpList<CR>
map <Leader>fm :FufBufferTag<CR>
map <Leader>fk :FufBookmarkFile<CR>
map <Leader>fa :FufBookmarkFileAdd<CR>
map <Leader>fq :FufQuickFix<CR>
map <Leader>fx :!/usr/local/bin/ctags -R *<CR>

map <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

map <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>


map <leader>rg :RopeGotoDefinition<CR>
map <Leader>rr :RopeRename<CR>

map <C-J> :m +1 <CR>
map <C-K> :m -2 <CR>

cmap <C-P> <C-R>=expand("%:p:h") . "/" <CR>

vmap D y'>p

vmap P p :call setreg('"', getreg('0')) <CR>

au! BufRead,BufNewFile *.haml         setfiletype haml
nmap <F1> <Esc>

imap <C-F> <C-R>=expand("%")<CR>


imap <C-L> <Space>=><Space>


command! Rroutes :e config/routes.rb
command! Rschema :e db/schema.rb

if filereadable(".vimrc.local")
  source .vimrc.local
endif

if executable("ack")
  set grepprg=/opt/local/bin/ack\ -H\ --nogroup\ --nocolor\ --ignore-dir=tmp\ --ignore-dir=coverage
endif


set number
set numberwidth=5

let g:snippetsEmu_key = "<S-Tab>"

set completeopt=longest,menu
set wildmode=list:longest,list:full
set complete=.,t

set ignorecase
set smartcase

let g:Tlist_Ctags_Cmd="ctags --exclude='*.js'"
set tags=./tags;

let g:fuf_splitPathMatching=1

command! -bar -nargs=1 OpenURL :!open <args>
function! OpenURL()
  let s:uri = matchstr(getline("."), '[a-z]*:\/\/[^ >,;:]*')
  echo s:uri
  if s:uri != ""
	  exec "!open \"" . s:uri . "\""
  else
	  echo "No URI found in line."
  endif
endfunction
map <Leader>w :call OpenURL()<CR>

let g:ackprg="/usr/local/bin/ack -H --nocolor --nogroup --column"
set hidden
set guioptions-=m
set guioptions-=T

autocmd InsertEnter * syn clear EOLWS | syn match EOLWS excludenl /\s\+\%#\@!$/
autocmd InsertLeave * syn clear EOLWS | syn match EOLWS excludenl /\s\+$/
highlight EOLWS ctermbg=blue guibg=blue
function! Getcwd_easy()
   let curdir = substitute(getcwd(), '^/home/.*/', "~/", "g")
   return curdir
endfunction
set statusline=%<%f\ %h%m%r%{fugitive#statusline()}[%{Getcwd_easy()}]%=%-14.(%l,%c%V%)\ %P
set shortmess=atI
let g:miniBufExplMapCTabSwitchBufs = 1

set ofu=syntaxcomplete#Complete
set completeopt+=longest,menuone
:highlight Pmenu guibg=brown gui=bold

au Bufenter *.hs compiler ghc

let g:haddock_browser = "/usr/bin/google-chrome"
let g:ghc = "/usr/bin/ghc"
let g:haddock_browser_callformat = "%s %s"
let g:haddock_docdir = "/usr/share/doc/ghc6-doc/html/"
let g:syntastic_enable_signs=1

:filetype plugin on
:nmap <c-tab> :bnext<cr>
:nmap <c-s-tab> :bprevious<cr>
:nmap <c-s> :w<CR>

autocmd BufReadPost fugitive://* set bufhidden=delete

set autowriteall

let g:fuf_patternSeparator = ';'
let g:Gitv_WipeAllOnClose = 1
highlight diffAdded guifg=#00ff00
highlight diffRemoved guifg=#ff0000

set t_Co=256

autocmd Syntax ruby setlocal foldmethod=syntax
autocmd Syntax python setlocal foldmethod=indent
autocmd Syntax ruby normal zR
autocmd Syntax python normal zR
"let g:notes_directory = '~/Dropbox/notes'
"let g:notes_shadowdir = '~/notes_shadow'
autocmd FileType python set omnifunc=pythoncomplete#Complete

set textwidth=79
set tabstop=8
set softtabstop=4
set shiftwidth=4

set guioptions+=c

map <F2> :%s/\s\+$//<CR>
nmap m<tab> ccdef <esc>oend<esc>kA
nmap c<tab> ccclass <esc>oend<esc>kA
source /Users/TWI/code/ropevim/ropevim.vim
autocmd BufWritePost *.py call Flake8()
"highlight OverLength ctermbg=red ctermfg=white guibg=#592929
"rmatch OverLength /\%79v.\+/


" clojure
let g:clojure_syntax_keywords = {
    \ 'clojureMacro': ["defproject", "defcustom"],
    \ 'clojureFunc': ["string/join", "string/replace"]
    \ }

let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['black',       'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]

let g:rbpt_max = 16

let g:rbpt_loadcmd_toggle = 0

map <C-Enter> :Eval<CR>
